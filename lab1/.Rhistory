# 1.
# 1.
# 1.
# 1.
# 1.
# 1.
# 1.
# 1.
# 1.
# 1.
vec = 0:10
(vec)
vec = 0:10
sumVecSquares = function(vector) {
sum = 0
for (element in vector) {
sum = sum + element;
}
sum
}
sum = sumVecSquares(vec)
vec = 0:10
sumVecSquares = function(vector) {
sum = 0
for (element in vector) {
sum = sum + (element**2);
}
sum
}
sum = sumVecSquares(vec)
matrixX = matrix(1:4, 2, 2)
matrixY = matrix(5:8, 2, 2)
View(matrixY)
View(matrixX)
View(matrixX)
matrixX = matrix(1:4, 2, 2)
matrixY = matrix(5:8, 2, 2)
inv(matrixX)
matrixX = matrix(1:4, 2, 2)
matrixY = matrix(5:8, 2, 2)
matrixXInv = solve(matrixX)
View(matrixXInv)
matrixX = matrix(1:4, 2, 2)
matrixY = matrix(5:8, 2, 2)
sumMatInverses = function(matrixA, matrixB) {
solve(matrixA) + solve(matrixB)
}
sum = sumMatInverses(matrixX, matrixY)
v = c(0, 5, 10)
skw = function(vec)
{
sum(vec^2)
}
skw(v)
f = function(x){
x ^ 2
}
zlozenie.funkcji = function(f, n)
{
function(x)
{
if(n == 1) return (f(x))
else return(f(zlozenie.funkcji(f, n-1)(x)))
}
}
zlozenie.funkcji(f, 1)(2)
zlozenie.funkcji(f, 2)(2)
zlozenie.funkcji(f, 3)(2)
View(f)
View(zlozenie.funkcji)
func = function(x) {
x+1
}
funComposition = function(fun, compositionAmount) {
function(x) {
if (compositionAmount == 0) {
return (fun(compositionAmount))
} else {
return (fun(funComposition(fun, compositionAmount - 1)(x)))
}
}
}
funComposition(func, 0)(5)
funComposition(func, 1)(5)
funComposition(func, 2)(5)
funComposition(func, 3)(5)
funComposition(func, 4)(5)
funComposition(func, 5)(5)
func = function(x) {
x+1
}
funComposition = function(fun, compositionAmount) {
function(x) {
if (compositionAmount == 1) {
return (fun(compositionAmount))
} else {
return (fun(funComposition(fun, compositionAmount - 1)(x)))
}
}
}
funComposition2 = function(fun, compositionAmount) {
function(x) {
for (counter in compositionAmount) {
fun(x)
}
}
}
funComposition(func, 0)(5)
funComposition(func, 1)(5)
funComposition(func, 2)(5)
funComposition(func, 3)(5)
funComposition(func, 4)(5)
funComposition(func, 5)(5)
funComposition2(func, 0)(5)
funComposition2(func, 1)(5)
funComposition2(func, 2)(5)
funComposition2(func, 3)(5)
funComposition2(func, 4)(5)
funComposition2(func, 5)(5)
func = function(x) {
x+1
}
funComposition = function(fun, compositionAmount) {
function(x) {
if (compositionAmount < 1) {
return
}
if (compositionAmount == 1) {
return (fun(compositionAmount))
} else {
return (fun(funComposition(fun, compositionAmount - 1)(x)))
}
}
}
funComposition2 = function(fun, compositionAmount) {
function(x) {
for (counter in compositionAmount) {
fun(x)
}
}
}
funComposition(func, 0)(5)
funComposition(func, 1)(5)
funComposition(func, 2)(5)
funComposition(func, 3)(5)
funComposition(func, 4)(5)
funComposition(func, 5)(5)
funComposition2(func, 0)(5)
funComposition2(func, 1)(5)
funComposition2(func, 2)(5)
funComposition2(func, 3)(5)
funComposition2(func, 4)(5)
funComposition2(func, 5)(5)
func = function(x) {
x+1
}
funComposition = function(fun, compositionAmount) {
function(x) {
if (compositionAmount < 1) {
return "Number must be > 0"
}
if (compositionAmount == 1) {
return (fun(x))
} else {
return (fun(funComposition(fun, compositionAmount - 1)(x)))
}
}
}
funComposition2 = function(fun, compositionAmount) {
function(x) {
for (counter in compositionAmount) {
fun(x)
}
}
}
funComposition(func, 0)(5)
funComposition(func, 1)(5)
funComposition(func, 2)(5)
funComposition(func, 3)(5)
funComposition(func, 4)(5)
funComposition(func, 5)(5)
funComposition2(func, 0)(5)
funComposition2(func, 1)(5)
funComposition2(func, 2)(5)
funComposition2(func, 3)(5)
funComposition2(func, 4)(5)
funComposition2(func, 5)(5)
func = function(x) {
x+1
}
funComposition = function(fun, compositionAmount) {
function(x) {
if (compositionAmount >= 1) {
return (fun(x))
} else {
return (fun(funComposition(fun, compositionAmount - 1)(x)))
}
}
}
funComposition2 = function(fun, compositionAmount) {
function(x) {
for (counter in compositionAmount) {
fun(x)
}
}
}
funComposition(func, 0)(5)
funComposition(func, 1)(5)
funComposition(func, 2)(5)
funComposition(func, 3)(5)
funComposition(func, 4)(5)
funComposition(func, 5)(5)
funComposition2(func, 0)(5)
funComposition2(func, 1)(5)
funComposition2(func, 2)(5)
funComposition2(func, 3)(5)
funComposition2(func, 4)(5)
funComposition2(func, 5)(5)
func = function(x) {
x+1
}
funComposition = function(fun, compositionAmount) {
function(x) {
if (compositionAmount <= 1) {
return (fun(x))
} else {
return (fun(funComposition(fun, compositionAmount - 1)(x)))
}
}
}
funComposition2 = function(fun, compositionAmount) {
function(x) {
for (counter in compositionAmount) {
fun(x)
}
}
}
funComposition(func, 0)(5)
funComposition(func, 1)(5)
funComposition(func, 2)(5)
funComposition(func, 3)(5)
funComposition(func, 4)(5)
funComposition(func, 5)(5)
funComposition2(func, 0)(5)
funComposition2(func, 1)(5)
funComposition2(func, 2)(5)
funComposition2(func, 3)(5)
funComposition2(func, 4)(5)
funComposition2(func, 5)(5)
func = function(x) {
x+1
}
funComposition = function(fun, compositionAmount) {
function(x) {
if (compositionAmount <= 1) {
return (fun(x))
} else {
return (fun(funComposition(fun, compositionAmount - 1)(x)))
}
}
}
funComposition2 = function(fun, compositionAmount) {
function(x) {
sum = 0
for (counter in compositionAmount) {
sum = sum + fun(x)
}
sum
}
}
funComposition(func, 0)(5)
funComposition(func, 1)(5)
funComposition(func, 2)(5)
funComposition(func, 3)(5)
funComposition(func, 4)(5)
funComposition(func, 5)(5)
funComposition2(func, 0)(5)
funComposition2(func, 1)(5)
funComposition2(func, 2)(5)
funComposition2(func, 3)(5)
funComposition2(func, 4)(5)
funComposition2(func, 5)(5)
